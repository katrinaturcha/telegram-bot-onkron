import os
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup
from dotenv import load_dotenv
import json
from google.oauth2.service_account import Credentials

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]

creds_json = json.loads(os.getenv("CREDS_JSON"))
creds = Credentials.from_service_account_info(creds_json, scopes=scope)
client = gspread.authorize(creds)


# –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–≤–µ–¥–∏ —Å–≤–æ—ë!)
SHEET_NAME = "Telegram Bot Requests"
sheet = client.open(SHEET_NAME).sheet1

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üìû –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫", "üèÜ –£—á–∞—Å—Ç–≤—É—é –≤ –∫–æ–Ω–∫—É—Ä—Å–µ", "üì¶ –ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–π—Å")

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ===
# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ===
def save_to_gsheet(user_id, username, phone, photo_url, req_type):
    # –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤:
    # timestamp | user_id | username | request_type | phone | photo_url
    sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user_id,
        username or "",
        req_type,
        phone or "",
        photo_url or ""
    ])


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ ===
async def get_photo_url(file_id):
    file = await bot.get_file(file_id)
    return f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
user_state = {}
user_phone = {}

# === /start ===
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    user_state.pop(msg.from_user.id, None)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# === –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ ===
@dp.message_handler(lambda m: m.text == "üìû –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
async def call_request(msg: types.Message):
    user_state[msg.from_user.id] = "callback"
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å + (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")

@dp.message_handler(lambda m: user_state.get(m.from_user.id) == "callback")
async def handle_callback_phone(msg: types.Message):
    phone = msg.text.strip()
    user = msg.from_user

    if not phone.startswith("+") or len(phone) < 10:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∏–Ω–∞—è —Å +, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567")
        return

    save_to_gsheet(user.id, user.username, phone, "", "–æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
    user_state.pop(user.id, None)
    await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚òéÔ∏è", reply_markup=main_kb)

# === –ö–æ–Ω–∫—É—Ä—Å ===
@dp.message_handler(lambda m: m.text == "üèÜ –£—á–∞—Å—Ç–≤—É—é –≤ –∫–æ–Ω–∫—É—Ä—Å–µ")
async def contest_start(msg: types.Message):
    user_state[msg.from_user.id] = "contest_wait_phone"
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å + (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ ===
@dp.message_handler(lambda m: user_state.get(m.from_user.id) == "contest_wait_phone")
async def contest_check_phone(msg: types.Message):
    phone = msg.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+" –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç >= 10 —Ü–∏—Ñ—Ä
    if not phone.startswith("+") or len([c for c in phone if c.isdigit()]) < 10:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∏–Ω–∞—è —Å +, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567")
        return

    user_state[msg.from_user.id] = "contest_wait_photo"
    user_phone[msg.from_user.id] = phone
    await msg.answer("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ üì∏")

@dp.message_handler(content_types=["photo", "document"])
async def contest_photo(msg: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    if user_state.get(msg.from_user.id) != "contest_wait_photo":
        return

    user = msg.from_user
    phone = user_phone.get(user.id, "")
    photo_url = None

    # === –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ ===
    if msg.photo:
        photo_id = msg.photo[-1].file_id
        photo_url = await get_photo_url(photo_id)

    # === –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø ===
    elif msg.document:
        mime = msg.document.mime_type.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if mime in ["image/jpeg", "image/png", "image/jpg"]:
            photo_id = msg.document.file_id
            photo_url = await get_photo_url(photo_id)
        else:
            await msg.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG –∏–ª–∏ PNG üì∏"
            )
            return

    # === –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ===
    if not photo_url:
        await msg.answer(
            "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG –∏–ª–∏ PNG üì∏"
        )
        return

    # === –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets ===
    try:
        save_to_gsheet(user.id, user.username, phone, photo_url, "–∫–æ–Ω–∫—É—Ä—Å")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        return

    # === –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
    user_state.pop(user.id, None)
    user_phone.pop(user.id, None)

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
    await msg.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ üéâ", reply_markup=main_kb)



# === –ü—Ä–∞–π—Å ===
@dp.message_handler(lambda m: m.text == "üì¶ –ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–π—Å")
async def send_price(msg: types.Message):
    pdf_path = "invoice.pdf"
    if os.path.exists(pdf_path):
        with open(pdf_path, "rb") as pdf:
            await bot.send_document(msg.chat.id, pdf, caption="üìÑ –í–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:")
        save_to_gsheet(msg.from_user.id, msg.from_user.username, "", "", "–ø—Ä–∞–π—Å")
        await msg.answer("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=main_kb)
    else:
        await msg.answer("‚ö†Ô∏è –§–∞–π–ª invoice.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ.", reply_markup=main_kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
